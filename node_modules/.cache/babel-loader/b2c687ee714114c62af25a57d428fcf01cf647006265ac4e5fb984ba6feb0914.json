{"ast":null,"code":"import React,{useState,useEffect,useCallback}from\"react\";import Card from\"./Card\";import\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const generateDeck=()=>{const contents=[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\"];return[...contents,...contents].sort(()=>Math.random()-0.5).map((content,index)=>({id:index,content,isMatched:false}));};const App=()=>{const[deck,setDeck]=useState(generateDeck);const[flippedCards,setFlippedCards]=useState([]);const[matchedPairs,setMatchedPairs]=useState(0);const[attempts,setAttempts]=useState(0);const[name,setName]=useState(\"\");const[highScore,setHighScore]=useState(JSON.parse(localStorage.getItem(\"highScore\"))||{name:\"\",attempts:Infinity});useEffect(()=>{if(flippedCards.length===2){setAttempts(prev=>prev+1);const[firstCard,secondCard]=flippedCards;if(firstCard.content===secondCard.content){setDeck(prevDeck=>prevDeck.map(card=>card.content===firstCard.content?{...card,isMatched:true}:card));setMatchedPairs(prev=>prev+1);}setTimeout(()=>setFlippedCards([]),1000);}},[flippedCards]);useEffect(()=>{if(matchedPairs===deck.length/2){if(attempts<highScore.attempts){const newHighScore={name,attempts};setHighScore(newHighScore);localStorage.setItem(\"highScore\",JSON.stringify(newHighScore));}}},[matchedPairs,deck.length,attempts,highScore.attempts,name]);const handleCardClick=useCallback(card=>{if(flippedCards.length<2&&!flippedCards.includes(card)){setFlippedCards(prev=>[...prev,card]);}},[flippedCards]);const resetGame=()=>{setDeck(generateDeck());setFlippedCards([]);setMatchedPairs(0);setAttempts(0);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Memory Game\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-container\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter your name\",value:name,onChange:e=>setName(e.target.value)})}),/*#__PURE__*/_jsxs(\"div\",{className:\"score\",children:[\"Attempts: \",attempts]}),/*#__PURE__*/_jsxs(\"div\",{className:\"high-score\",children:[\"High Score: \",highScore.name,\" - \",highScore.attempts,\" attempts\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:deck.map(card=>/*#__PURE__*/_jsx(Card,{card:card,onClick:handleCardClick,isFlipped:flippedCards.includes(card)||card.isMatched},card.id))}),matchedPairs===deck.length/2&&/*#__PURE__*/_jsx(\"div\",{className:\"win-message\",children:\"You Win!\"}),/*#__PURE__*/_jsx(\"button\",{className:\"reset-button\",onClick:resetGame,children:\"Reset Game\"})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Card","jsx","_jsx","jsxs","_jsxs","generateDeck","contents","sort","Math","random","map","content","index","id","isMatched","App","deck","setDeck","flippedCards","setFlippedCards","matchedPairs","setMatchedPairs","attempts","setAttempts","name","setName","highScore","setHighScore","JSON","parse","localStorage","getItem","Infinity","length","prev","firstCard","secondCard","prevDeck","card","setTimeout","newHighScore","setItem","stringify","handleCardClick","includes","resetGame","className","children","type","placeholder","value","onChange","e","target","onClick","isFlipped"],"sources":["/Users/nikhilkedia/Code/React-Memory-Game/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Card from \"./Card\";\nimport \"./App.css\";\n\nconst generateDeck = () => {\n  const contents = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"];\n  return [...contents, ...contents]\n    .sort(() => Math.random() - 0.5)\n    .map((content, index) => ({ id: index, content, isMatched: false }));\n};\n\nconst App = () => {\n  const [deck, setDeck] = useState(generateDeck);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState(0);\n  const [attempts, setAttempts] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [highScore, setHighScore] = useState(\n    JSON.parse(localStorage.getItem(\"highScore\")) || {\n      name: \"\",\n      attempts: Infinity,\n    }\n  );\n\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      setAttempts((prev) => prev + 1);\n      const [firstCard, secondCard] = flippedCards;\n      if (firstCard.content === secondCard.content) {\n        setDeck((prevDeck) =>\n          prevDeck.map((card) =>\n            card.content === firstCard.content\n              ? { ...card, isMatched: true }\n              : card\n          )\n        );\n        setMatchedPairs((prev) => prev + 1);\n      }\n      setTimeout(() => setFlippedCards([]), 1000);\n    }\n  }, [flippedCards]);\n\n  useEffect(() => {\n    if (matchedPairs === deck.length / 2) {\n      if (attempts < highScore.attempts) {\n        const newHighScore = { name, attempts };\n        setHighScore(newHighScore);\n        localStorage.setItem(\"highScore\", JSON.stringify(newHighScore));\n      }\n    }\n  }, [matchedPairs, deck.length, attempts, highScore.attempts, name]);\n\n  const handleCardClick = useCallback(\n    (card) => {\n      if (flippedCards.length < 2 && !flippedCards.includes(card)) {\n        setFlippedCards((prev) => [...prev, card]);\n      }\n    },\n    [flippedCards]\n  );\n\n  const resetGame = () => {\n    setDeck(generateDeck());\n    setFlippedCards([]);\n    setMatchedPairs(0);\n    setAttempts(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter your name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n      <div className=\"score\">Attempts: {attempts}</div>\n      <div className=\"high-score\">\n        High Score: {highScore.name} - {highScore.attempts} attempts\n      </div>\n      <div className=\"board\">\n        {deck.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            onClick={handleCardClick}\n            isFlipped={flippedCards.includes(card) || card.isMatched}\n          />\n        ))}\n      </div>\n      {matchedPairs === deck.length / 2 && (\n        <div className=\"win-message\">You Win!</div>\n      )}\n      <button className=\"reset-button\" onClick={resetGame}>\n        Reset Game\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}